Kubernetes installation
-----------------------

swapoff -a
To make use of 100% resources allocated. If swap is on it will slow down things.

hostnamectl set-hostname 'k8s-master'
Setting the hostname for the node.

exec bash
getting in bash

setenforce 0
setting the selinux enforce as 0

sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
disabling selinux

cat /etc/sysconfig/selinux
checking if selinux is disabled

yum install firewalld -y
installing firewalld to set up ports

systemctl start firewalld
systemctl enable firewalld
systemctl status firewalld
starting and enabling firewalld and checking the status

firewall-cmd --permanent --add-port=6443/tcp
firewall-cmd --permanent --add-port=2379-2380/tcp
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=10251/tcp
firewall-cmd --permanent --add-port=10252/tcp
firewall-cmd --permanent --add-port=10255/tcp
firewall-cmd --reload
opening ports to be used and making them as permanent

modprobe br_netfilter
Enabled bridge filter which inturn would enable stateful transparent firewall-cmd

echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
Bridged packets will traverse iptable rules. This will come handy during ingress and egress.
Ingress is traffic that originates outside the n/w and is inbound.
egress is traffic that originates inside the n/w and is outbound

vi /etc/hosts
<ip> <nodename> <nodename>
defining the ip and nodename inside hosts file so that kube refers to this while kubeadm init happens

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
Creating kubernetes repo file in local

sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux Docker-engine -y
removing already existing packages of docker as kubernetes and docker has to be compatible with respect to versions.

sudo yum install -y yum-utils device-mapper-persistent-data lvm2
Maps physical volume to logical volume

sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
creates docker repo file in local

yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
installs containerd.io, docker has dependency on this and hence we are installing this.

yum install docker-ce -y
installing docker

sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl status docker
starting, enabling and checking the status of docker.

yum install -y kubelet-1.15.1 kubeadm-1.15.1 kubectl-1.15.1
installing kubernetes with specific version to kubernetes components

systemctl restart docker && systemctl enable docker
restarting and enabling docker post k8s installation

systemctl  restart kubelet && systemctl enable kubelet
restarting and enabling kubelet

kubeadm init --apiserver-advertise-address=<replace with ip of your machine> --pod-network-cidr=10.244.0.0/16 --service-cidr=10.244.0.0/12
initiates kubernetes, we can say it starts kubernetes.
(Make sure to make a note of join token)
kubeadm init --apiserver-advertise-address=10.7.158.34 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.244.0.0/12

kubeadm join 10.7.158.34:6443 --token oxxlqg.3ggolilhiuj9x8xw \
    --discovery-token-ca-cert-hash sha256:9e88745d785df6f289a5be0fa07b49ba62d16c96026cfa2a61a90fb0eb1b93c7


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
Above commands have to be executed in whichever used you wish to use kubernetes going forward.

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
Installing the container networking interface plugin. We are using flannel. we have calico and weavenet which are similar.

kubectl get nodes
lists down the nodes

kubectl get pods --all-namespaces
list down all namespaces which are created by default till now

kubectl taint nodes k8s-master node-role.kubernetes.io/master-
By default master has a taint, a restriction which does not allow any pod to be scheduled.


To create GUI
-------------
https://devopscube.com/how-to-setup-gui-for-amazon-ec2-rhel-7-instance/

